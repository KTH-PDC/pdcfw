#!/bin/bash

# pdcfw - manages PDC Linux Netfilter/IPtables firewall configuration

# pdcfw - pdcfw main
# Author: Ilari Korhonen, KTH Royal Institute of Technology
#
# Copyright (C) 2018 KTH Royal Institute of Technology. All rights reserved.
# See LICENSE file for more information.


# source in functions from distribution directory
source $(dirname $0)/functions.sh

# if we have a configuration file, source it in
if [ -f ${configfile} ]; then
    source ${configfile}
fi

# source in the main function
if [ -x ${MAIN_FUNC} ]; then
    source ${MAIN_FUNC}
else
    echo "${prog}: file ${MAIN_FUNC} not present or executable, aborting!" > /dev/stderr
    exit -1
fi

# process command line arguments and select action
case "$1" in
    show)
	shift
	show_action $@
	;;

    dry)
	shift
	printf "${prog}: executing dry run, resulting rule set:\n# Generated by ${prog} version ${version} on $(date)\n" > /dev/stderr

	# execute the whole program with a dummy cmd
	cat <(commit=true fwcmd="echo" _main)

	printf "# Rule set evaluation complete on $(date)\n${prog}: dry run complete - apply rule set by executing pdcfw apply!\n" > /dev/stderr
	;;

    apply)
	shift
	printf "${prog}: saving current in-memory firewall rule set to ${IPTABLES_RULES}..."
	save
	[ $? -eq 0 ] && success || failure
	printf "${prog}: flushing current in-memory firewall rule set..."
	flush
	[ $? -eq 0 ] && success || failure
	printf "${prog}: executing rule set build from ${MAIN_FUNC} and committing..."
	${restore} <(commit=true fwcmd="echo" _main)
	[ $? -eq 0 ] && success || failure
	;;

    flush)
	shift
	printf "${prog}: flushing IPTables ruleset...\n"
	${fwcmd} --flush
	[ $? -eq 0 ] && success || failure
	;;

    restore)
	printf "${prog}: restoring IPTables ruleset from ${IPTABLES_RULES}..."
	${restore} < ${IPTABLES_RULES}
	[ $? -eq 0 ] && success || failure
	;;
	
    *)
	echo "${prog}: usage ${prog} {show|dry|apply|flush|restore}"
	exit 1
	;;
esac
